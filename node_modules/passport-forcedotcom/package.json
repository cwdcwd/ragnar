{
  "name": "passport-forcedotcom",
  "version": "0.1.1",
  "description": "Salesforce.com/Force.com/Database.com authentication strategy for Passport.",
  "author": {
    "name": "Joshua Birk",
    "email": "joshua.birk@salesforce.com"
  },
  "contributors": [
    {
      "name": "Jared Hanson",
      "email": "jaredhanson@gmail.com",
      "url": "http://www.jaredhanson.net/"
    },
    {
      "name": "Raja Rao",
      "email": "rajaraodv100@yahoo.com",
      "url": "http://www.twitter.com/rajaraodv"
    },
    {
      "name": "GoInstant Inc.",
      "email": "support@goinstant.com",
      "url": "https://goinstant.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/joshbirk/passport-forcedotcom.git"
  },
  "license": "BSD-3-Clause",
  "main": "./lib/passport-forcedotcom",
  "dependencies": {
    "passport-oauth2": "1.1.1"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "keywords": [
    "passport",
    "salesforce",
    "salesforce.com",
    "force.com",
    "database.com",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "devDependencies": {
    "mocha": "~1.17.1",
    "chai": "~1.9.0",
    "express": ">= 0.0.0",
    "ejs": ">= 0.0.0"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha -R spec test/run.js"
  },
  "readme": "# passport-forcedotcom\n\n<p align=\"center\">\n  <img src=\"https://raw.github.com/joshbirk/passport-forcedotcom/master/images/sf.png\" alt=\"SalesForce\" />\n</p>\n\nThis is a Strategy for use with [PassportJS](http://passportjs.org) with the\nForce.com platform (meaning you can use it with Saleforce CRM, your Force.com\napplications and Database.com).\n\n**Please Note** that as of version 0.1.0, successful authentication now results\nin a standard [PassportJS User Profile](http://passportjs.org/guide/profile/)\nobject.\n\n### Usage\n\n1. Download this npm module\n\n```sh\nnpm install --save passport-forcedotcom\n```\n\n2. Import it into your app\n\n```javascript\nvar passport = require('passport');\nvar ForceDotComStrategy = require('passport-forcedotcom').Strategy;\n```\n\n3. Define the strategy with your application credentials and information\n\n```javascript\npassport.use(new ForceDotComStrategy({\n  clientID: '{client_id}',\n  clientSecret: '{client_secret}',\n  scope: ['id','chatter_api'],\n  callbackURL: 'https://my.example.com/auth/forcedotcom/callback'\n}, function verify(token, refreshToken, profile, done) {\n  console.log(profile);\n  return done(null, profile);\n}));\n```\n\n4. And then setup some routes to hande the flow\n\n```javascript\napp.get('/auth/forcedotcom', passport.authenticate('forcedotcom'));\n// this should match the callbackURL parameter above:\napp.get('/auth/forcedotcom/callback',\n  passport.authenticate('forcedotcom', { failureRedirect: '/error' }),\n  function(req, res){\n    res.render(\"index\",checkSession(req));\n  }\n);\n```\n\nAnd as usual with passport, you can update the user serialization/de-serialization.\n\n### Creating a Connected App\n\nIn order to use this Strategy, you'll need to have a [Connected\nApp](https://help.salesforce.com/apex/HTViewHelpDoc?id=connected_app_overview.htm)\ninside of Salesforce.  See [this\narticle](https://help.salesforce.com/apex/HTViewHelpDoc?id=connected_app_create.htm)\nfor detailed and up-to-date Connected App creation instructions.\n\nTips:\n\n- Please note that the `client_id` is referred to as \"Consumer Key\" and the\n  `client_secret` is referred to as the \"Consumer Secret\" in some of the UI and\n  documentation.\n- Be sure to set the Connected App's callback URL to the same setting you\n  provided in the `new ForceDotComStrategy` constructor.  If you're using\n  `express`, then the route you attach must also correspond to this URL (e.g.\n  `app.get('/auth/forcedotcom/callback', ...)`\n- to get a `photos` section in the [User\n  Profile](http://passportjs.org/guide/profile/) you need to set up the `api`\n  or `chatter_api` scope when creating the Connected App.\n  - the URL to the photo lasts for ~30 days\n  - if you do not need the photos, supply a `skipPhoto: true` option to the\n    `ForceDotComStrategy` constructor and only enable the `id` scope.\n\n### Example\n\nThere is an example app called `simple-example` in: `examples/` folder. This shows how to use ForceDotCom-Passport with lots of comments.\nTo run locally:\n\n1. Open `app.js` in `examples/simple-example`\n2. Set `CF_CLIENT_ID`, `CF_CLIENT_SECRET`, `CF_CALLBACK_URL` and optionally, `SF_AUTHORIZE_URL`,  `SF_TOKEN_URL` to match your connected app's settings.\n3. Install npm modules by running `npm install`\n4. Run: `node app.js`\n5. Open `localhost:3000` in the browser and try to login using OAuth.\n\n### Authors\n\n- <a href='https://twitter.com/joshbirk' target='_blank'>Joshua Birk</a>\n- <a href='https://twitter.comrajaraodv' target='_blank'> Raja Rao DV </a>\n- <a href='https://twitter.com/jaredhanson' target='_blank'>Jared Hanson</a> -\n  whose help resolved a previous issue with handling the incoming OAuth\n  information so that things like the `instance_url` can be readily available.\n- <a href='https://goinstant.com' target='_blank'>GoInstant</a>\n\n### Legal\n\nÂ©2013-2014 salesforce.com, All Rights Reserved.\n\nUse and distribution is licensed under the 3-Clause BSD License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joshbirk/passport-forcedotcom/issues"
  },
  "_id": "passport-forcedotcom@0.1.1",
  "dist": {
    "shasum": "0800513b70859e45c3c81c1a1be2b3ee32e139f8"
  },
  "_from": "passport-forcedotcom@",
  "_resolved": "https://registry.npmjs.org/passport-forcedotcom/-/passport-forcedotcom-0.1.1.tgz"
}
